The File menu includes the usual selections for New, Open, Save, Save As,
Close, Exit. The Process menu allows you to Add, Remove and Rename
a process. The Help menu includes an About selection in addition to this
help display. Saving a program will save its topology, but not the layout
on the screen.

Programming in CPV

When you request a new program by selecting Process/New, a window will
appear for declarations of global variables. CPV uses Pascal-like syntax
for variable declaration, except that integer variables must include bounds,
and all variables must have initial values. Only one declaration per line
is allowed. To facilitate the correct declarations of variables you can
access templates by right-clicking within the variables frame.

To add a new process, select Process/New and type the name of the process.
A frame for local variable declarations will popup; it works the same
as the global variable frame. When you have entered the variables, select OK;
if no local variables are needed, select Cancel. The process frame includes
a title bar with the process name, a box with the variable in the upper
left-hand corner; the rest of the frame is used for the operations
of the process

The operations of the process are built as a flowchart. There are four types
of nodes that can be created by right-clicking and selecting from the pop-up
menu: assignment, semaphore operation, branching and end. Except for end
nodes, an input dialog box is displayed in which you enter the text of the
node; the text in a node can be modified by double-clicking the node. Nodes
can be moved and resized in usual way. To remove a node, select it and
press Del.

The expression on the right-hand side of an assignment can be: a value,
a variable, a unary not expression of a boolean value or variable, a binary
integer expression with + or -, or a binary Boolean expression with or or and.
Semaphore operation nodes can be wait(S) or Signal(S). Branch nodes accept
binary expressions with values or variables; = and <> can be used with Boolean
or integer types and <, >, <= and >= can be used with integer types. There can
be at most one end node in each process.

To create arrows between nodes, move the cursor to a snap point of the source
node (the yes and no corners of a branching operation and the center of other
operations). The cursor will be changed to hand. While holding down the left
mouse button, move the cursor to a snap point on the target node and release
the button.

It is possible to create segmented arrows: Shift+left-click on an arrow to
add or remove a moveable junction

Exactly one block in each process must be marked as the start block:
right-click and select Mark As Starting.

Creating State Diagrams

A state of a concurrent program consists of a vector whose elements are the
instruction pointers of all processes and the values of all the variables,
both global and local. A state diagram shows all the possible states of the
concurrent program, and every path through the diagram is a possible scenario
of the execution of the program. Select Initialize to start the construction
of the state diagram. You can construct the entire diagram by selecting Expand
All, or you can construct the diagram incrementally by double-clicking on
any state.


